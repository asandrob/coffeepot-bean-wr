{
  "name": "Coffeepot-bean-wr",
  "tagline": "Writer and Reader for flat files",
  "body": "coffeepot-bean-wr (Writer and Reader)\r\n=====================================\r\n\r\nCoffeepot-bean-wr is a simple Java framework for marshalling Java beans to flat file and unmarshal flat file to Java Beans.\r\n\r\nFeatures:\r\n\r\n  - Support for delimited and fixed length formats.\r\n  - Uses Java annotations for mapping.\r\n  - Maps unannotated classes dynamically.\r\n  - Override annotations dynamically.\r\n  - Custom type handlers are supported.\r\n\r\nReal examples of use you will find them in [coffeepot-br-sped-fiscal](https://github.com/jean-merelis/coffeepot-br-sped-fiscal) and [coffeepot-br-sintegra](https://github.com/jean-merelis/coffeepot-br-sintegra) projects. The coffeepot-br-sped-fiscal project uses delimited format, and the sintegra project uses FixedLength format.\r\n\r\nDownload from Maven central\r\n\r\n```xml\r\n        <dependency>\r\n            <groupId>com.github.jean-merelis</groupId>\r\n            <artifactId>coffeepot-bean-wr</artifactId>\r\n            <version>1.2.2-FINAL</version>            \r\n        </dependency> \r\n```\r\n\r\nExamples\r\n--------\r\n\r\nMapping\r\n-------\r\n\r\n```java\r\n\t\t@Record(fields = {\r\n\t\t\t\t@Field(name = \"\", id = true, constantValue = \"ORDER\"),\r\n\t\t\t\t@Field(name = \"id\"),\r\n\t\t\t\t@Field(name = \"date\"),\r\n\t\t\t\t@Field(name = \"customer\"),\r\n\t\t\t\t@Field(name = \"items\")\r\n\t\t\t})\r\n\t\tpublic class Order {\r\n\r\n\t\t\tprivate Integer id;\r\n\t\t\tprivate Date date;\r\n\t\t\tprivate String customer;\r\n\t\t\tprivate List<Item> items;\r\n\t\t\r\n\t\t\t// getters and setters...\r\n\t\t}\r\n\r\n\t\t@Record(fields = {\r\n\t\t\t\t@Field(name = \"\", id = true, constantValue = \"ITEM\"),\r\n\t\t\t\t@Field(name = \"number\"),\r\n\t\t\t\t@Field(name = \"product\"),\r\n\t\t\t\t@Field(name = \"quantity\")\r\n\t\t\t})\r\n\t\tpublic class Item {\r\n\r\n\t\t\tprivate int number;\r\n\t\t\tprivate String product;\r\n\t\t\tprivate double quantity;\r\n\t\t\r\n\t\t\t// getters ... setters...\r\n\t\t}\t\t\r\n```\r\n\r\nUsing...\r\n\r\n```java\r\n\r\n\tpublic void test() throws Exception{\r\n\t\tOrder order = new Order();\r\n\t\t//add some data\r\n\r\n        File file = new File(\"ORDER.tmp\");\r\n        Writer w = new FileWriter(file);\r\n\r\n        DelimitedWriter instance = new DelimitedWriter(w);\r\n        instance.setDelimiter('|');\r\n        instance.setEscape('\\\\');\r\n        instance.setRecordTerminator(\"|\\r\\n\");\r\n        \r\n        instance.write(order);\r\n\r\n        w.flush();\r\n        w.close();\r\n\r\n```\r\n\r\nOutput: \r\n\r\n\t\tORDER|123|2015-03-10T00:04:15|john b|\r\n\t\tITEM|1|product 1|10|\r\n\t\tITEM|2|product 2|5|\r\n\t\tITEM|3|product 3|2|\r\n\r\n    \r\nReading\r\n--------------\r\n\r\nFor simple file structure, i.e. where the file has only one type of record, simply map the fields of the class that represents this record and perform the reading. \r\n\r\nIf file contains a list of these records you can read with the parseAsListOf.\r\n\r\n```java\r\n\t//Example for a file with a list of the records.\r\n\r\n    public void read(){\r\n\t\tFile file = new File(\"file-with-a-list-of-records.txt\");\r\n\r\n\t\ttry (FileReader fr = new FileReader(file)) {\r\n\t\t\tFixedLengthReader reader = new FixedLengthReader(fr);\r\n\t\t\tList<MyRecord> records = reader.parseAsListOf(MyRecord.class);\r\n\t\t\tfor (MyRecord r: records){ \r\n\t\t\t  ...\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n```\r\n\r\nFor more complex structures that have various types of records, it is necessary that the records have an identifier field so it can be possible to instantiate the corresponding class of the record.\r\nThe identifier field must have the value that identifies the record in the constantValue property and the id property must be true.\r\n\r\n```java\r\n\r\n@Record(fields = {\r\n    @Field(name = \"\", constantValue = \"01\", id = true, length = 2), // identifier field\r\n    @Field(name = \"value\", length = 18)\r\n\t// ... more fields\r\n})\r\n\r\npublic class Rec01 {\r\n\r\n    private String value;\r\n\t\t\r\n\t// more fields getters and setters...\r\n\t...\r\n}\r\n\r\n\r\n@Record(fields = {\r\n    @Field(name = \"\", constantValue = \"AA\", id = true, length = 2), // identifier field\r\n    @Field(name = \"value\", length = 18)\r\n\t// ... more fields\r\n})\r\n\r\npublic class RecAA {\r\n\r\n    private String value;\r\n\t\t\r\n\t// more fields getters and setters...\r\n\t...\r\n}\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}